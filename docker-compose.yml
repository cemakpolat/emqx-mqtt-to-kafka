version: '3'
volumes: 
  grafana:
  
services:
  emqx-enterprise:
    image: emqx/emqx-enterprise:5.0.4
    container_name: emqx
    healthcheck:
      test: ["CMD", "emqx", "ping"]
      interval: 10s
      timeout: 10s
      retries: 12
    ports:
      - 1883:1883
      - 18083:18083
    volumes:
      - ./emqx/cluster.hocon:/opt/emqx/data/configs/cluster.hocon
      - ./emqx/api_secret:/opt/emqx/data/api_secret
    environment:
      EMQX_DASHBOARD__BOOTSTRAP_USERS_FILE: '"/opt/emqx/data/api_secret"'
    depends_on:
      - kafka
    networks:     
      - emqx-net  

  emqx-exporter:
    image: emqx/emqx-exporter
    container_name: emqx-exporter
    ports:
      - 8085:8085
    command:
      - '--emqx.nodes=emqx-enterprise:18083'
      - '--emqx.auth-username=76668f8a2003d597'
      - '--emqx.auth-password=CRCDB6lxxzN58e5HoD82llBC0Erg1TVZIAUsdTjPU7N'
    depends_on:
      emqx-enterprise:
        condition: service_healthy
    networks:      
      - emqx-net   

  mqttx-simulate:
    image: emqx/mqttx-cli:v1.9.3
    container_name: mqttx-simulate
    command:
      - /bin/sh
      - -c
      - |
        mqttx simulate -sc tesla -c 20 -h emqx-enterprise
    depends_on:
      emqx-enterprise:
        condition: service_healthy
    networks:      
      - emqx-net   

  mqttx:
    image: emqx/mqttx-cli:v1.9.3
    container_name: mqttx
    command:
      - /bin/sh
      - -c
      - |
        mqttx sub -t 'mqttx/simulate/#' -v -h emqx-enterprise
    depends_on:
      emqx-enterprise:
        condition: service_healthy
    networks:     
      - emqx-net  

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - 9090:9090
    volumes:
      - ./prometheus/prometheus.yaml:/etc/prometheus/prometheus.yml
    networks:     
      - emqx-net   

  grafana:
    image: grafana/grafana:9.3.2
    container_name: grafana
    ports:
      - 3000:3000
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=public
    volumes:
      - grafana:/grafana-dashboard-emqx5-ee
      - ./grafana-provisioning/dashboard.yaml:/etc/grafana/provisioning/dashboards/dashboard.yaml
      - ./grafana-provisioning/datasource.yaml:/etc/grafana/provisioning/datasources/datasource.yaml
    networks:      
      - emqx-net   

  kafka:
    image: confluentinc/cp-kafka:5.5.3
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "my-vehicles:1:1"
    depends_on:
      - zookeeper
    networks:
      - emqx-net

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:      
      - emqx-net   

  kafka-consumer:
    build:
      context: ./consumer_app
      dockerfile: Dockerfile
    container_name: kafka-consumer
    restart: on-failure
    depends_on:
      - kafka
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_TOPIC=my-vehicles
    networks:      
      - emqx-net   

networks:
  emqx-net:
    name: emqx-net
